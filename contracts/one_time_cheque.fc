#include "imports/stdlib.fc";

const int op::claim = 0x12a5fe4d; 

global slice password_hash;
global cont claim_cont;

() load_data() impure {
    var ds = get_data().begin_parse();

    password_hash = ds~load_bits(256);
    claim_cont = ds~load_ref().begin_parse().bless();

    ds.end_parse();
}

() claim (slice address, cont c) impure asm "EXECUTE";

() recv_internal() impure { }

() recv_external(slice in_msg) impure {
    int op = in_msg~load_uint(32);

    load_data();

    if (op == op::claim){
        slice password = in_msg~load_bits(256);
        slice address = in_msg;

        throw_unless(700, password_hash.equal_slice_bits(begin_cell().store_uint(password.string_hash(), 256).end_cell().begin_parse()));

        accept_message();

        claim(address, claim_cont);
    }
}

