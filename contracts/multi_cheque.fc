#include "imports/stdlib.fc";

const int op::claim = 0x12a5fe4d; 

global int password_hash;
global cell claim_cont;
global int cheque_amount;
global cell users;

(slice, int) dict_get? (cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET NULLSWAPIFNOT";

() load_data() impure {
    var ds = get_data().begin_parse();

    password_hash = ds~load_uint(256);
    claim_cont = ds~load_ref();
    cheque_amount = ds~load_coins();
    users = ds~load_dict();

    ds.end_parse();
}

() save_data() impure inline {
  set_data(begin_cell()
            .store_uint(password_hash, 256)
            .store_ref(claim_cont)
            .store_coins(cheque_amount)
            .store_dict(users)
           .end_cell()
          );
}

() claim (int cheque_amount, slice address, cell c) impure asm "EXECUTE";

() recv_internal() impure { }

() recv_external(slice in_msg) impure {
    int op = in_msg~load_uint(32);

    load_data();

    if (op == op::claim){
        throw_unless(703, get_balance().pair_first() >= cheque_amount);
        slice password = in_msg~load_bits(256);
        slice address = in_msg;
        
        throw_unless(700, password_hash == password.string_hash());

        (_, int f?) = users.dict_get?(267, address);

        throw_if(701, f?);

        users~dict_set(267, address, "");
        
        save_data();

        accept_message();

        claim(cheque_amount, address, claim_cont);
    }
}

